<?xml version="1.0" ?>

<robot name="diff_drive" xmlns:xacro="https://www.ros.org/wiki/xacro" >

<xacro:property name="props" value= "${load_yaml('$(find nuturtle_description)/config/diff_params.yaml')}"/>
<xacro:property name="Wheel_width" value="${props['wheel_width']}" />
<xacro:property name="wheel_radius" value="${props['wheel_radius']}" />
<xacro:property name="wheel_base" value="${props['wheel_base']}" />
<xacro:property name="chassis_length" value="${props['chassis_length']}" />
<xacro:property name="chassis_thickness" value="${props['chassis_thickness']}" />
<xacro:property name="wheel_axel_offset" value="${props['wheel_axel_offset']}" />

<xacro:include filename="$(find nuturtle_description)/urdf/macro.xacro" />
<!-- <xacro:include filename="$(find nuturtle_gazebo)/urdf/diff_drive.gazebo" /> -->
<!-- <xacro:include filename="$(find nuturtle_gazebo)/urdf/material.urdf.xacro" /> -->
<xacro:arg name="mode" default="0" />

  <link name="base_link">
      <origin rpy="0 0 0" xyz="0 0 0"/>
  </link>

  <link name="base_body" >
    <!-- <pose>0 0 ${chassis_thickness/2 + wheel_radius-wheel_axel_offset} 0 0 0</pose> -->
<!-- 
    <inertial>
      <mass value="0.94"/>
      <origin rpy="0 0 0" xyz="0 0 ${chassis_thickness/2 + wheel_radius-wheel_axel_offset}"/>
      <inertia ixx="${0.94*((wheel_base+Wheel_width)*(wheel_base+Wheel_width)+chassis_thickness*chassis_thickness)/12.0}" ixy="0" ixz="0" iyy="${0.94*(chassis_length*chassis_length+chassis_thickness*chassis_thickness)/12.0}" iyz="0" izz="${0.94*((wheel_base+Wheel_width)*(wheel_base+Wheel_width)+chassis_length*chassis_length)/12.0}"/>
    </inertial>

    <collision>
      <origin rpy="0 0 0" xyz="0 0 ${chassis_thickness/2 + wheel_radius-wheel_axel_offset}"/>
      <geometry>
        <box size="${chassis_length} ${wheel_base-Wheel_width} ${chassis_thickness}"/>
      </geometry>
    </collision> -->

    <visual>
      <origin rpy="0 0 0" xyz="0 0 ${chassis_thickness/2 + wheel_radius-wheel_axel_offset}"/>
      <geometry>
          <box size="${chassis_length} ${wheel_base-Wheel_width} ${chassis_thickness}"/>
       </geometry>
     </visual>
  </link>

   <link name="ball_caster">

     <!-- <collision name="caster_top_collision">
       <origin rpy="0 0 0" xyz="${chassis_length/2 - (wheel_radius/2-wheel_axel_offset/2)} 0 ${wheel_radius/2-wheel_axel_offset/2}"/>
       <geometry>
         <sphere radius="${wheel_radius/2-wheel_axel_offset/2}"/>
       </geometry>
     </collision> -->

     <visual>
      <origin rpy="0 0 0" xyz="${chassis_length/2 - (wheel_radius/2-wheel_axel_offset/2)} 0 ${wheel_radius/2-wheel_axel_offset/2}"/>
       <geometry>
         <sphere radius="${wheel_radius/2-wheel_axel_offset/2}"/>
       </geometry>

       <material name="blue">
                <color rgba="0 0 1 1" />
       </material>

     </visual>
  </link>

  <xacro:link_wheel name="link_right_wheel" />
  <xacro:joint_wheel name="right_wheel_joint"  child="link_right_wheel"  origin_xyz="${wheel_radius} ${(wheel_base)/2} ${wheel_radius}"  />

  <xacro:link_wheel name="link_left_wheel" />
  <xacro:joint_wheel name="left_wheel_joint"   child="link_left_wheel"   origin_xyz="${wheel_radius} ${-(wheel_base)/2} ${wheel_radius}"  />

  <!-- <link name="base_scan">
      <origin rpy="0 0 1.5707" xyz="0 0 ${wheel_radius-0.02+chassis_thickness}"/>
  </link> -->

  <!-- <joint name="joint_caster" type="fixed">
    <origin rpy="0 0 0" xyz="0 0 ${wheel_radius-0.02+chassis_thickness}"/>
    <child link="base_scan"/>
    <parent link="base_body"/>
  </joint> -->

  <joint name="base_link_base_body_joint" type="fixed">
    <origin rpy="0 0 0" xyz="0 0 0"/>
    <child link="base_body"/>
    <parent link="base_link"/>
  </joint>


  <joint name="caster_chassis" type="fixed">
    <parent link="base_body"/>
    <child link="ball_caster"/>
    <origin rpy="0 0 0" xyz="0 0 0"/>
  </joint>

  <!-- <xacro:robot_dd mode="$(arg mode)" /> -->

</robot>
